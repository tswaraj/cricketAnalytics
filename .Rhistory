setwd("../")
devtools::install("cricketAnalytics_0.1.0.tar.gz")
pwd
library(cricketAnalytics)
process_cricket_data()
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
system.file("extdata", package = "cricketAnalytics")
system.file("extdata", "data.zip",package = "cricketAnalytics")
system.file("extdata/raw-data", package = "cricketAnalytics")
system.file("extdata", package = "cricketAnalytics")
system.file("data", "cricket_processed_data.csv", package = "cricketAnalytics")
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
process_cricket_data()
process_cricket_data()
system.file("extdata", package = "cricketAnalytics"
)
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
?unzip
tempfile(fileext = ".zip")
system.file("extdata", package = "cricketAnalytics")
system.file("extdata", package = "cricketAnalytics")
system.file("extdata", package = "cricketAnalytics")
library(cricketAnalytics)
system.file("extdata", package = "cricketAnalytics")
process_cricket_data()
data("processed_cricket_data")
head(processed_cricket_data)
library(cricketAnalytics)
process_cricket_data()
data("all_matches_data")
head(all_matches_data)
process_cricket_data()
system.file("extdata", package = "cricketAnalytics")
list.files(system.file(package = "cricketAnalytics"))
list.files(system.file(package = "cricketAnalytics"))
library(cricketAnalytics)
list.files(system.file(package = "cricketAnalytics"))
processed_cricket_data()
process_cricket_data()
library(cricketAnalytics)
processed_cricket_data
processed_cricket_data()
process_cricket_data()
library(cricketAnalytics)
process_cricket_data()
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
#' Download and process CSV files (cricket matches ball by ball data)
#'
#' Fetch the latest cricket match data for Women's T20 Challenge cricket matches.
#' Process the data (extract and create features) that would help predict outcome of a match.
#'
#' @importFrom utils unzip
#' @importFrom utils download.file
#' @import dplyr
#' @import zoo
#'
#' @export
load_and_process_cricket_data = function() {
# Download and unzip the file to the package's inst/extdata directory
url = "https://cricsheet.org/downloads/wtc_female_csv2.zip"
destfile = tempfile(fileext = ".zip")
download.file(url, destfile)
unzip(destfile, exdir = system.file("extdata", package = "cricketAnalytics"))
file.remove(destfile)
processed_cricket_data = data.frame(
power_play = logical(),
batting_team = character(),
bowling_team = character(),
venue = character(),
balls_delivered = numeric(),
first_inning_score = numeric(),
current_score = numeric(),
current_run_rate = numeric(),
wickets_lost = numeric(),
run_in_last5 = numeric(),
wickets_in_last5 = numeric(),
winner = logical()
)
process_match_data = function(file){
match_df = read.csv(file)
match_df$power_play = ifelse(match_df$ball < 7, 1, 0)
match_df$balls_delivered = 1
match_df$balls_delivered[match_df$innings == 1] = cumsum(match_df$balls_delivered[match_df$innings == 1])
match_df$balls_delivered[match_df$innings == 2] = cumsum(match_df$balls_delivered[match_df$innings == 2])
match_df$runs_scored_current_ball = match_df$runs_off_bat + match_df$extras
first_inning_score = sum(match_df$runs_scored_current_ball[match_df$innings == 1])
match_df$first_inning_score = first_inning_score
match_df$current_score[match_df$innings == 1] = cumsum(match_df$runs_scored_current_ball[match_df$innings == 1])
match_df$current_score[match_df$innings == 2] = cumsum(match_df$runs_scored_current_ball[match_df$innings == 2])
match_df$ball = as.character(match_df$ball)
split_ball = strsplit(match_df$ball, "\\.")
match_df$current_over = sapply(split_ball, "[", 1)
match_df$current_ball = sapply(split_ball, "[", 2)
match_df$current_over = as.numeric(match_df$current_over)
match_df$current_ball = as.numeric(match_df$current_ball)
match_df$current_run_rate = match_df$current_score / (match_df$current_over + 1)
match_df$wicket = ifelse(nchar(match_df$player_dismissed) > 0, 1, 0)
match_df$wickets_lost[match_df$innings == 1] = cumsum(match_df$wicket[match_df$innings == 1])
match_df$wickets_lost[match_df$innings == 2] = cumsum(match_df$wicket[match_df$innings == 2])
match_df = subset(match_df, innings == 2)
match_df = match_df %>% mutate(run_in_last5 = rollapplyr(runs_scored_current_ball, width = 30, FUN = sum, fill = NA, partial = TRUE))
match_df = match_df %>% mutate(wickets_in_last5 = rollapplyr(wicket, width = 30, FUN = sum, fill = NA, partial = TRUE))
if (match_df[dim(match_df)[1], c("current_score")] > match_df[dim(match_df)[1], c("first_inning_score")]){
match_df$winner = 1
} else {
match_df$winner = 0
}
cols = c("power_play", "batting_team", "bowling_team", "venue", "balls_delivered", "first_inning_score", "current_score", "current_run_rate", "wickets_lost", "run_in_last5", "wickets_in_last5", "winner")
return (match_df[, cols])
}
file_list = list.files(system.file("extdata", package = "cricketAnalytics"))
for (file in file_list) {
if (file == "all_matches.csv"){
all_matches_data = read.csv(paste0(system.file("extdata", package = "cricketAnalytics"), "/", file))
}
if (grepl("^\\d+\\.csv$", file)) {
match_df = process_match_data(paste0(system.file("extdata", package = "cricketAnalytics"), "/", file))
processed_cricket_data = rbind(processed_cricket_data, match_df)
}
}
# Save the processed data to a CSV file in the package's data directory
usethis::use_data(processed_cricket_data, overwrite = TRUE)
usethis::use_data(all_matches_data, overwrite = TRUE)
}
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
devtools::document()
rm(list = c("load_and_process_cricket_data"))
load_and_process_cricket_data()
library(cricketAnalytics)
devtools::document()
load_and_process_cricket_data()
devtools::document()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
load_and_process_cricket_data()
system.file("extdata", package = "cricketAnalytics")
load_and_process_cricket_data()
library(cricketAnalytics)
library(cricketAnalytics)
library(cricketAnalytics)
library(cricketAnalytics)
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
?save
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
devtools::document()
devtools::document()
library(cricketAnalytics)
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
system.file("data", package= "cricketAnalytics")
library(cricketAnalytics)
load_and_process_cricket_data()
?use_data
system.file("data")
system.file("extdata")
system.file("data", package = "cricketAnalytics")
devtools::document()
library(cricketAnalytics)
load_and_process_cricket_data()
library(fs)
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
library(cricketAnalytics)
load_and_process_cricket_data()
system.file("data", package = "cricketAnalytics")
library(cricketAnalytics)
devtools::document()
usethis::use_data()
library(cricketAnalytics)
devtools::document()
library(cricketAnalytics)
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
library(cricketAnalytics)
devtools::document()
library(cricketAnalytics)
load_and_process_cricket_data()
load_and_process_cricket_data()
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
system.file("data", package = "cricketAnalytics")
library(cricketAnalytics)
library(cricketAnalytics)
load_and_process_cricket_data()
library(cricketAnalytics)
library(cricketAnalytics)
devtools::document
devtools::document()
devtools::document()
library(cricketAnalytics)
test = data.frame(power_play = 1, batting_team = "Supernovas", bowling_team = "Trailblazers",  venue = "Wankhede Stadium, Mumbai",
balls_delivered = 36, first_inning_score = 129, current_score = 46, current_run_rate = 7.67, wickets_lost = 0, run_in_last5 = 38, wickets_in_last5 = 0)
test
predict_match_outcome(test)
library(cricketAnalytics)
test
predict_match_outcome(test)
library(cricketAnalytics)
test
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
library(cricketAnalytics)
test
predict_match_outcome(test)
library(cricketAnalytics)
test
predict_match_outcome(test)
library(cricketAnalytics)
test
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
test
predict_match_outcome(test)
devtools::load_all(".")
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
devtools::document()
library(cricketAnalytics)
plot_boundaries()
test
predict_match_outcome(test)
devtools::document()
library(cricketAnalytics)
test
predict_match_outcome(test)
devtools::document()
devtools::document()
library(cricketAnalytics)
test
plot_boundaries()
predict_match_outcome(test)
devtools::document()
library(cricketAnalytics)
predict_match_outcome()
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
library(cricketAnalytics)
library(cricketAnalytics)
predict_match_outcome(test)
predict_match_outcome(test)
library(cricketAnalytics)
predict_match_outcome(test)
predict_match_outcome(test)
plot_boundaries()
library(cricketAnalytics)
predict_match_outcome(test)
predict_match_outcome(test)
plot_boundaries()
devtools::document()
library(cricketAnalytics)
plot_total_runs("Sawai Mansingh Stadium, Jaipur")
plot_total_runs("Sawai Mansingh Stadium, Jaipu")
devtools::document()
plot_average_runs_no_outliers()
plot_boundaries()
devtools::document()
library(cricketAnalytics)
plot_average_runs_per_match_no_outliers()
plot_total_runs()
plot_total_runs("Sawai Mansingh Stadium, Jaipur")
devtools::document()
library(cricketAnalytics)
test
predict_match_outcome(test)
plot_boundaries()
plot_average_runs_per_match_no_outliers()
plot_boundaries()
plot_total_runs("Sawai Mansingh Stadium, Jaipur")
library(cricketAnalytics)
plot_total_runs("Sawai Mansingh Stadium, Jaipur")
plot_total_runs("Sawa Mansingh Stadium, Jaipur")
library(cricketAnalytics)
plot_total_runs("Sawa Mansingh Stadium, Jaipur")
plot_total_runs("Sawai Mansingh Stadium, Jaipur")
ggplot()
ggplot(aes(x = Team, y = Total_Runs))
ggplot(aes(x = "Team", y = "Total_Runs"))
library(cricketAnalytics)
plot_total_runs("Sawa Mansingh Stadium, Jaipur")
plot_total_runs("Sawai Mansingh Stadium, Jaipur")
devtools:document()
devtools::document()
library(cricketAnalytics)
plot_cumulative_runs_specific_match()
devtools::document()
library(cricketAnalytics)
test
predict_match_outcome(test)
plot_batting_team_averages()
library(cricketAnalytics)
predict_match_outcome(test)
plot_batting_team_averages()
plot_bowling_team_averages()
plot_boundaries()
plot_cumulative_runs_specific_match()
utils::cricketAnalytics()
utils::alarm()
utils::methods()
devtools::document()
system.file(myapp)
system.file("myapp")
test
test$current_score = 130
test
predict_match_outcome(test)
test$current_score = 1
predict_match_outcome(test)
test$current_score = 46
test$balls_delivered = 112
predict_match_outcome(test)
test$balls_delivered = 36
devtools::document()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
system.file("myapp")
system.file("extdata")
system.file("myapp", package = "cricketAnalytics")
library(cricketAnalytics)
run_app()
devtools::document()
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
plot_cumulative_runs_all_teams
plot_cumulative_runs_all_teams()
devtools::document()
devtools::document()
library(cricketAnalytics)
plot_cumulative_runs_all_teams()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
plot_batting_team_averages()
run_app()
library(cricketAnalytics)
plot_batting_team_averages()
plot_total_runs("bc")
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
library(plotly)
run_app()
run_app()
devtools::document()
devtools::document()
library(cricketAnalytics)
run_app()
devtools::document()
run_app
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app
run_app()
remove.packages("plotly")
library(plotly)
remove.packages("plotly")
library(plotly)
library(plotly)
library(plotly)
devtools::document()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app()
library(cricketAnalytics)
run_app
run_app()
devtools::document()
library(cricketAnalytics)
run_app()
run_app()
devtools::document()
devtools::document()
library(cricketAnalytics)
run_app()
